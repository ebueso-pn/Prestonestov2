def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    // throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '2'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '2.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'  // Google Services plugin


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 34
    

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

  defaultConfig {
    // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
    applicationId "Prestonesto"
    minSdkVersion 23
    targetSdkVersion 33
    versionCode 9
    versionName "1.0.9"
}

   signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "env"

    productFlavors {
        dev {
            dimension "env"
            applicationId "com.prestonesto.dev"
            manifestPlaceholders = [
                appName: "[Dev] Prestonesto",
                uriScheme: "prestonesto",
                linkDomain: "d8ypx.app.link",
                linkDomainAlternate: "d8ypx-alternate.app.link",
                branchKey: "key_test_kFktvmgWCLSKNbLdzavz3dpdyyh1EO35",
                testMode: "true"
            ]   
        }
        prod {
            dimension "env"
            applicationId "com.prestonesto.prod"
            manifestPlaceholders = [
                appName: "Prestonesto",
                uriScheme: "prestonesto",
                linkDomain: "d8ypx.test-app.link",
                linkDomainAlternate: "d8ypx.test-alternate.app.link",
                branchKey: "key_live_owgEDjk9EMHLRaIiDnBsGjenDxa1BG3I",
                testMode: "false"
            ]
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
